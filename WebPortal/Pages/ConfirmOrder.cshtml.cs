using BMS.Data.Models;
using BMS.Data.Providers;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using QuestPDF.Fluent;
using QuestPDF.Helpers;
using QuestPDF.Infrastructure;

namespace WebPortal.Pages
{
    public class ConfirmOrderModel : PageModel
    {
        private readonly IOrderDataProvider _orderDataProvider;

        public ConfirmOrderModel(IOrderDataProvider orderDataProvider)
        {
            _orderDataProvider = orderDataProvider;
        }

        [BindProperty(SupportsGet = true)]
        public DateTime? SelectedOrderDate { get; set; }

        [BindProperty]
        public List<Order> Orders { get; set; } = new();

        [BindProperty]
        public List<int> SelectedOrderIds { get; set; } = new();

        public async Task OnGet()
        {
            //SelectedOrderDate = SelectedOrderDate ?? DateTime.Today;
            if (SelectedOrderDate.HasValue)
            {
                Orders = await _orderDataProvider.GetOrdersByDateAsync(SelectedOrderDate.Value);
            }
        }

        public async Task<IActionResult> OnPostConfirmOrdersAsync()
        {
            if (SelectedOrderIds != null && SelectedOrderIds.Count > 0)
            {
                await _orderDataProvider.ConfirmOrdersAsync(SelectedOrderIds);
                TempData["NotifyMsg"] = "Selected orders confirmed successfully.";
                TempData["NotifyType"] = "success";
            }
            else
            {
                TempData["NotifyMsg"] = "No orders selected.";
                TempData["NotifyType"] = "warning";
            }

            // Redirect to GET with the same date to refresh the list
            return RedirectToPage(new { OrderDate = SelectedOrderDate?.ToString("yyyy-MM-dd") });
        }

        public async Task<IActionResult> OnGetPrintReportAsync(DateTime selectedOrderDate)
        {
            var reportData = await _orderDataProvider.GetConfirmedOrderReportByDateAsync(selectedOrderDate);
            var OrderData = await _orderDataProvider.GetOrdersByDateAsync(selectedOrderDate);
            string FooterNote = "Generated by Thannickal Bakery System";

            // Group by TeamName
            var groupedByTeam = reportData
                .GroupBy(x => x.TeamName)
                .OrderBy(g => g.Key)
                .ToList();

            // Group by Customer
            var groupedByCustomer = reportData
                .GroupBy(x => x.CustomerName)
                .OrderBy(g => g.Key)
                .ToList();

            var pdfBytes = Document.Create(container =>
            {
                container.Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(20);
                    page.DefaultTextStyle(x => x.FontSize(12));
                    page.Header().Text($"Team Wise Items Preparation List").FontSize(18).Bold().AlignCenter().Underline().FontColor(Color.FromHex("#31adec"));

                    page.Content().Column(col =>
                    {
                        foreach (var teamGroup in groupedByTeam)
                        {
                            var orderDate = teamGroup.FirstOrDefault()?.OrderDate.ToString("dd-MMM-yyyy") ?? "";
                            col.Item().PaddingBottom(3);
                            col.Item().Row(row =>
                            {
                                row.RelativeItem().Column(c =>
                                {
                                    c.Item().Text($"Team: {teamGroup.Key}").Bold();
                                    c.Item().Text($"Order Date: {orderDate}").Bold();
                                });
                            });
                            col.Item().PaddingBottom(3);

                            // Group by RawMaterialName
                            var rawMaterialData = teamGroup
                                .GroupBy(r => r.RawMaterialName)
                                .Select((g, index) => new
                                {
                                    Index = index + 1,
                                    RawMaterialName = g.Key,
                                    TotalRequired = g.Sum(x => x.RawMaterialRequiredQuantity * x.ProductOrderQuantity)
                                })
                                .ToList();

                            // Table
                            col.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.ConstantColumn(30); // #
                                    columns.RelativeColumn(2);   // RawMaterialName
                                    columns.RelativeColumn(2);   // Calculated Quantity
                                });

                                // Header
                                table.Header(header =>
                                {
                                    header.Cell().Text("#").Bold();
                                    header.Cell().Text("Ingrident Name").Bold();
                                    header.Cell().Text("Required Qty").Bold();
                                });

                                // Rows
                                foreach (var item in rawMaterialData)
                                {
                                    table.Cell().Padding(2).Text(item.Index.ToString());
                                    table.Cell().Padding(2).Text(item.RawMaterialName);
                                    table.Cell().Padding(2).Text(item.TotalRequired.ToString("0.### kg"));
                                }
                            });

                            col.Item().PaddingBottom(10);

                            var groupedByCategory = teamGroup
                                .GroupBy(x => x.CategoryName)
                                .OrderBy(g => g.Key)
                                .ToList();

                            col.Item().Text($"Category Wise List").FontSize(14).Bold().AlignLeft().Underline().FontColor(Color.FromHex("#31adec"));
                            col.Item().PaddingBottom(3);

                            foreach (var categoryGroup in groupedByCategory)
                            {
                                col.Item().PaddingBottom(3);
                                col.Item().Row(row =>
                                {
                                    row.RelativeItem().Column(c =>
                                    {
                                        c.Item().Text($"Category: {categoryGroup.Key}").Bold();
                                    });
                                });
                                col.Item().PaddingBottom(3);

                                // Group by Category Name
                                var CategoryWiseData = categoryGroup
                                 .GroupBy(r => new { r.RawMaterialName })
                                 .Select((g, index) => new
                                 {
                                     Index = index + 1,
                                     RawMaterialName = g.Key.RawMaterialName,
                                     TotalRequired = g.Sum(x => x.RawMaterialRequiredQuantity * x.ProductOrderQuantity)
                                 })
                                 .ToList();

                                col.Item().PaddingLeft(10).Table(table =>
                                {
                                    table.ColumnsDefinition(columns =>
                                    {
                                        columns.ConstantColumn(30); // #
                                        columns.RelativeColumn(2);
                                        columns.RelativeColumn(2);
                                    });


                                    table.Header(header =>
                                    {
                                        header.Cell().Text("#").Bold();
                                        header.Cell().Text("Ingrident Name").Bold();
                                        header.Cell().Text("Required Qty").Bold();
                                    });


                                    foreach (var item in CategoryWiseData)
                                    {
                                        table.Cell().Padding(2).Text(item.Index.ToString());
                                        table.Cell().Padding(2).Text(item.RawMaterialName);
                                        table.Cell().Padding(2).Text(item.TotalRequired.ToString("0.### kg"));
                                    }
                                });
                            }



                            col.Item().PaddingBottom(10);

                            var ProductWiseData = teamGroup
                                    .GroupBy(r => r.ProductName)
                                    .Select((g, index) => new ProductSummary
                                    {
                                        Index = index + 1,
                                        ProductName = g.Key,
                                        ProductId = g.FirstOrDefault()?.ProductId ?? 0,
                                        TotalRequired = g
                                            .Select(x => x.ProductOrderQuantity)
                                            .Distinct()
                                            .First()
                                    })
                                    .ToList();

                            col.Item().Text($"Required Products List").FontSize(14).Bold().AlignLeft().Underline().FontColor(Color.FromHex("#31adec"));
                            col.Item().PaddingBottom(3);

                            col.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.ConstantColumn(30); // #
                                    columns.RelativeColumn(2);
                                    columns.RelativeColumn(2);
                                });


                                table.Header(header =>
                                {
                                    header.Cell().Text("#").Bold();
                                    header.Cell().Text("Product Name").Bold();
                                    header.Cell().Text("Required Qty").Bold();
                                });


                                foreach (var item in ProductWiseData)
                                {
                                    table.Cell().Padding(2).Text(item.Index.ToString());
                                    table.Cell().Padding(2).Text(item.ProductName);

                                    var sumOfQuantity = OrderData
                                    .SelectMany(o => o.OrderItems) // Flatten all order items
                                    .Where(oi => oi.Product.Id == item.ProductId)
                                    .Sum(oi => oi.Quantity);

                                    table.Cell().Padding(2).Text(sumOfQuantity.ToString("0"));
                                }
                            });

                            col.Item().PaddingBottom(10);
                        }
                    });

                    page.Footer().AlignCenter().Text(FooterNote);
                })
                .Page(page =>
                {
                    page.Size(PageSizes.A4);
                    page.Margin(20);
                    page.DefaultTextStyle(x => x.FontSize(12));
                    page.Header().PaddingBottom(5).Text($"Customer Wise Packing List").FontSize(18).Bold().AlignCenter().Underline().FontColor(Color.FromHex("#31adec"));

                    page.Content().Column(col =>
                    {
                        for (int i = 0; i < groupedByCustomer.Count; i++)
                        {
                            var customerGroup = groupedByCustomer[i];
                            var orderDate = customerGroup.FirstOrDefault()?.OrderDate.ToString("dd-MMM-yyyy") ?? "";
                            col.Item().PaddingBottom(3);
                            col.Item().Row(row =>
                            {
                                row.RelativeItem().Column(c =>
                                {
                                    c.Item().Text($"Customer: {customerGroup.Key}").Bold();
                                    c.Item().Text($"Order Date: {orderDate}").Bold();
                                });
                            });
                            col.Item().PaddingBottom(3);

                            // Group by RawMaterialName
                            var rawMaterialData = customerGroup
                                .GroupBy(r => new { r.ProductName, r.OrderDeliveryDateTime })
                                .Select((g, index) => new
                                {
                                    Index = index + 1,
                                    _ProductName = g.Key.ProductName,
                                    DeliveryTime = g.Key.OrderDeliveryDateTime,
                                    TotalRequired = g
                                        .Select(x => x.ProductOrderQuantity)
                                        .Distinct()
                                        .First()
                                })
                                .OrderByDescending(o => o.DeliveryTime ?? DateTime.MinValue)
                                .ThenBy(o => o._ProductName)
                                .ToList();

                            // Table
                            col.Item().Table(table =>
                            {
                                table.ColumnsDefinition(columns =>
                                {
                                    columns.ConstantColumn(30); // #
                                    columns.RelativeColumn(2);  // Product Name
                                    columns.RelativeColumn(2);  // Required Qty
                                    columns.RelativeColumn(2);  // Delivery Time
                                });

                                // Header
                                table.Header(header =>
                                {
                                    header.Cell().Text("#").Bold();
                                    header.Cell().Text("Product Name").Bold();
                                    header.Cell().Text("Required Qty").Bold();
                                    header.Cell().Text("Delivery Time").Bold();
                                });

                                int SNo = 1;

                                foreach (var item in rawMaterialData)
                                {
                                    var firstTime = item?.DeliveryTime;
                                    string dlvtm = firstTime.HasValue ? firstTime.Value.ToString("hh:mm tt") : "";
                                    bool highlight = !string.IsNullOrEmpty(dlvtm);

                                    Color bgColor = highlight ? Colors.Grey.Lighten3 : Colors.White;

                                    table.Cell().Background(bgColor).Padding(2).Text(SNo.ToString());
                                    table.Cell().Background(bgColor).Padding(2).Text(item._ProductName);
                                    table.Cell().Background(bgColor).Padding(2).Text(item.TotalRequired.ToString("0.### nos"));
                                    table.Cell().Background(bgColor).Padding(2).Text(dlvtm);

                                    SNo++;
                                }
                            });

                            // Add page break only if this is NOT the last group
                            if (i < groupedByCustomer.Count - 1)
                            {
                                col.Item().PageBreak();
                            }
                        }
                    });

                    page.Footer().AlignCenter().Text(FooterNote);
                });
            }).GeneratePdf();

            return File(pdfBytes, "application/pdf", $"TeamWisePrepList_{selectedOrderDate:yyyyMMdd}.pdf");
        }

    }

    public class ProductSummary
    {
        public int Index { get; set; }
        public int ProductId { get; set; }
        public string ProductName { get; set; }
        public int TotalRequired { get; set; } // You can modify this now
    }
}